SHORT-TERM FUTURE FEATURES/FIXES:
-EspBridge should display deduced host and port of incoming packets, in addition to claimed host and port
-count of peers on grid remains inaccurately high after a peer is removed for non-responsiveness
-preservation of shared code on the grid when individual grid apps die/crash/terminate
-ability to dump shared code to files as documentation of performance
-chat system should be a shared timestamped array so that new joiners are updated about earlier chats, and all available codeshares
(and chat log can be saved for documentation of performance)

LONG-TERM FUTURE FEATURES/FIXES:
-multiple WAN bridges instead of just one
-audio and video sharing

AN OPTION:
-actions and parameters are timestamped by initiator on their local monotonic clocks and broadcast
-receiving nodes store the actions/parameters as monotonicTime and a peer identifier
-then they use their current knowledge of the clock difference to publicize the parameters against a local clock

1. node A: tempoOn at local monotonic time 1000 (future) with parameters

2. kvc broadcast: nodeA tempoOn at their time 1000 with parameters
3. node B kvc: store tempoOn nodeA time 1000 with parameters
4. when node B queries tempo: time values are adjusted to be relative to a local clock



this means the beat will move slightly as clock adjustments against the initiator happen
but it does already, right?

for our tick test, how would we work with this absence of a global clock?

WHAT IS THE ALTERNATIVE?:
i.e. can you establish a stable time 0 from all of the calculated differences?
stable in the sense that new peers joining will not move the timebase...
most ahead doesn't work - if that peer drops, time falls backwards
and if a peer with a system clock ahead joins, time races forwards
same problem with most behind
and same albeit smaller problem with averaging of system times


can you establish a stable time
