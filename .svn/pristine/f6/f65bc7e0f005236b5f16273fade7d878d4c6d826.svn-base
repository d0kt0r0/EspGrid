/*
EspClock.sc -- SuperCollider class to provide a TempoClock connected to EspGrid
by David Ogborn <ogbornd@mcmaster.ca>
Version-date: 18 December 2013

Installation Instructions:
1. Place this file in your SuperCollider extensions folder
2. Launch SuperCollider (or Reboot Interpreter, or Recompile Class Library)

Examples of Use:
TempoClock.default = EspClock.new; // make the default clock a new EspClock
TempoClock.default.start; // if the beat is paused/was-never-started, make it go
TempoClock.default.tempo = 1.8; // change tempo in normal SC way (all changes go to EspGrid)
TempoClock.default.pause; // pause the beat
TempoClock.default.status; // returns how close internal and external clocks are in seconds (close to 0 normally!)
*/

EspClock : TempoClock {

	// public properties (see TempoClock for all of it's properties/methods of course!)
    var <versionDate; // a string describing the update-date of this class definition

	// private variables:
    var refClock; // an internal TempoClock that follows EspGrid "immediately"
	var defaultQueueSize;
	var send; // cached NetAddr for communication from SC to EspGrid
	var clockDiff; // cached difference between SystemClock.seconds and EspGrid time
	var lastTempo;
	var lastTime;
	var lastBeat;
	var clockSkipJack;
	var tempoSkipJack;

	// instance methods:

	init {
		| tempo,beats,seconds,queueSize |
		super.init(0.000000001,beats,seconds,queueSize);
        versionDate = "18 December 2013 (0.49.5)";
		permanent = true;
		send = NetAddr("127.0.0.1",5510);
		defaultQueueSize = queueSize;
		lastTempo = 0;
		lastTime = 0;

		OSCdef(\clockOffset,
			{
				| msg,time,addr,port |
				clockDiff = msg[1]+(msg[2]*0.000000001) + Date.getDate.rawSeconds - SystemClock.seconds;
                // comment: need to find a better way of getting the difference between SC SystemClock
                // and UNIX-epoch-1970 time.  Value of Date.getDate.rawSeconds - SystemClock.seconds varies!!!
 			},
			"/clock/offset/r").permanent_(true);

		OSCdef(\espTempo,
			{
				| msg,time,addr,port |
				if(clockDiff.notNil, // don't sync metre before system clock adjustment is known
                    {
                    var bps = if(msg[1]==1,msg[2]/60,0.000000001); // SC doesn't pause, so... :(
                    var systemTime = msg[3] + (msg[4]*0.000000001) - clockDiff; // adjust time to SystemClock epoch
                    if(bps != lastTempo || systemTime != lastTime,
                        {
                        msg.postln;
						refClock = TempoClock.new(bps,msg[5],systemTime,defaultQueueSize);
						lastTempo = bps; lastTime = systemTime;
                    });
                });
                if(refClock.notNil,
                    {
                    var newTempo = refClock.beats - this.beats * 10 + refClock.tempo;
                    newTempo = newTempo.clip(0.000000001,1000000000);
                    this.setTempoAtSec(newTempo,SystemClock.seconds);
                });
			},
			"/esp/tempo/r").permanent_(true);

		this.sendClockRequest;
		this.sendTempoRequest;
        tempoSkipJack = SkipJack.new( {this.sendTempoRequest;}, 0.1, clock: SystemClock);
		clockSkipJack = SkipJack.new( {this.sendClockRequest;}, 10.0, clock: SystemClock);
	}

    // public methods:
	pause { this.sendBeatOff; }
	start { this.sendBeatOn; }
	tempo_ {|t| if(t<=5,{this.sendTempoChange(t)},{"tempo too high".postln;});}
	status { ^if(refClock!=nil, {refClock.beats - this.beats;}, "no refclock yet"); }

	// private methods:
	sendTempoChange { |t| send.sendMsg("/esp/beat/tempo", t * 60); }
	sendCycleLength { |l| send.sendMsg("/esp/beat/cycleLength", l); }
	sendBeatOn { send.sendMsg("/esp/beat/on",1); }
	sendBeatOff { send.sendMsg("/esp/beat/on",0); }
	sendTempoRequest { send.sendMsg("/esp/tempo/q"); }
	sendClockRequest { send.sendMsg("/clock/offset/q"); }

}
