/*
EspClock.sc -- SuperCollider class to provide a TempoClock connected to EspGrid
by David Ogborn <ogbornd@mcmaster.ca>
Version-date: 18 December 2013 (EspGrid 0.49.6)

Installation Instructions:
1. Place this file in your SuperCollider extensions folder
2. Launch SuperCollider (or Reboot Interpreter, or Recompile Class Library)

Examples of Use:
TempoClock.default = EspClock.new; // make the default clock a new EspClock
TempoClock.default.start; // if the beat is paused/was-never-started, make it go
TempoClock.default.tempo = 1.8; // change tempo in normal SC way (all changes shared via EspGrid)
TempoClock.default.pause; // pause the beat
*/

EspClock : TempoClock {

	// public properties
    var <versionDate; // a string describing the update-date of this class definition

	// private variables:
	var send; // cached NetAddr for communication from SC to EspGrid
	var clockDiff; // difference between SystemClock.seconds and EspGrid time
    var prevFreq,prevTime,prevBeat;

	// public methods:
	pause { send.sendMsg("/esp/beat/on",0); }
	start { send.sendMsg("/esp/beat/on",1); }
	tempo_ {|t| if(t<=5,{send.sendMsg("/esp/beat/tempo", t * 60);},{"tempo too high".postln;});}

    // initializer
	init {
		| tempo,beats,seconds,queueSize |
		super.init(0.000000001,beats,seconds,queueSize);
        versionDate = "18 December 2013 (EspGrid 0.49.6)";
        ("EspClock.sc: " + versionDate).postln;
		permanent = true;
		send = NetAddr("127.0.0.1",5510);

		OSCdef(\clockOffset,
			{
				| msg,time,addr,port |
				clockDiff = msg[1]+(msg[2]*0.000000001) + Date.getDate.rawSeconds - SystemClock.seconds;
                // comment: need to find a better way of getting the difference between SC SystemClock
                // and UNIX-epoch-1970 time.  Value of Date.getDate.rawSeconds - SystemClock.seconds varies!!!
 			},
			"/clock/offset/r").permanent_(true);

		OSCdef(\espTempo,
			{
				| msg,time,addr,port |
				if(clockDiff.notNil, // don't sync metre before system clock adjustment is known
                    {
                    if(msg[1]==0,{
                        this.setTempoAtSec(0.000000001,SystemClock.seconds); // SC doesn't pause, so...
                    },{
                        var refFreq = msg[2]/60;
                        var refTime = msg[3] + (msg[4]*0.000000001);
                        var refBeat = (SystemClock.seconds - refTime + clockDiff) * refFreq + msg[5];
                        var newFreq = (refBeat - this.beats * 10 + refFreq).clip(0.000000001,1000000000);
                        this.setTempoAtSec(newFreq,SystemClock.seconds);
                    });
                });
			},
			"/esp/tempo/r").permanent_(true);

		send.sendMsg("/clock/offset/q");
        SkipJack.new( {send.sendMsg("/esp/tempo/q");}, 0.05, clock: SystemClock);
		SkipJack.new( {send.sendMsg("/clock/offset/q");}, 10.0, clock: SystemClock);
	}

}
